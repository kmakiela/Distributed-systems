# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `bank.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module BankSystem
_M_BankSystem = Ice.openModule('BankSystem')
__name__ = 'BankSystem'

if 'Currency' not in _M_BankSystem.__dict__:
    _M_BankSystem.Currency = Ice.createTempClass()
    class Currency(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Currency.PLN = Currency("PLN", 0)
    Currency.GBP = Currency("GBP", 1)
    Currency.USD = Currency("USD", 2)
    Currency.CHF = Currency("CHF", 3)
    Currency.EUR = Currency("EUR", 4)
    Currency._enumerators = { 0:Currency.PLN, 1:Currency.GBP, 2:Currency.USD, 3:Currency.CHF, 4:Currency.EUR }

    _M_BankSystem._t_Currency = IcePy.defineEnum('::BankSystem::Currency', Currency, (), Currency._enumerators)

    _M_BankSystem.Currency = Currency
    del Currency

if 'AccountType' not in _M_BankSystem.__dict__:
    _M_BankSystem.AccountType = Ice.createTempClass()
    class AccountType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AccountType.STANDARD = AccountType("STANDARD", 0)
    AccountType.PREMIUM = AccountType("PREMIUM", 1)
    AccountType._enumerators = { 0:AccountType.STANDARD, 1:AccountType.PREMIUM }

    _M_BankSystem._t_AccountType = IcePy.defineEnum('::BankSystem::AccountType', AccountType, (), AccountType._enumerators)

    _M_BankSystem.AccountType = AccountType
    del AccountType

if 'Password' not in _M_BankSystem.__dict__:
    _M_BankSystem.Password = Ice.createTempClass()
    class Password(object):
        def __init__(self, value=''):
            self.value = value

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.value)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BankSystem.Password):
                return NotImplemented
            else:
                if self.value is None or other.value is None:
                    if self.value != other.value:
                        return (-1 if self.value is None else 1)
                else:
                    if self.value < other.value:
                        return -1
                    elif self.value > other.value:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BankSystem._t_Password)

        __repr__ = __str__

    _M_BankSystem._t_Password = IcePy.defineStruct('::BankSystem::Password', Password, (), (('value', (), IcePy._t_string),))

    _M_BankSystem.Password = Password
    del Password

if 'Pesel' not in _M_BankSystem.__dict__:
    _M_BankSystem.Pesel = Ice.createTempClass()
    class Pesel(object):
        def __init__(self, value=0):
            self.value = value

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.value)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BankSystem.Pesel):
                return NotImplemented
            else:
                if self.value is None or other.value is None:
                    if self.value != other.value:
                        return (-1 if self.value is None else 1)
                else:
                    if self.value < other.value:
                        return -1
                    elif self.value > other.value:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BankSystem._t_Pesel)

        __repr__ = __str__

    _M_BankSystem._t_Pesel = IcePy.defineStruct('::BankSystem::Pesel', Pesel, (), (('value', (), IcePy._t_long),))

    _M_BankSystem.Pesel = Pesel
    del Pesel

if 'Balance' not in _M_BankSystem.__dict__:
    _M_BankSystem.Balance = Ice.createTempClass()
    class Balance(object):
        def __init__(self, value=0.0):
            self.value = value

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_BankSystem.Balance):
                return NotImplemented
            else:
                if self.value != other.value:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_BankSystem._t_Balance)

        __repr__ = __str__

    _M_BankSystem._t_Balance = IcePy.defineStruct('::BankSystem::Balance', Balance, (), (('value', (), IcePy._t_double),))

    _M_BankSystem.Balance = Balance
    del Balance

if 'Name' not in _M_BankSystem.__dict__:
    _M_BankSystem.Name = Ice.createTempClass()
    class Name(object):
        def __init__(self, value=''):
            self.value = value

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.value)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BankSystem.Name):
                return NotImplemented
            else:
                if self.value is None or other.value is None:
                    if self.value != other.value:
                        return (-1 if self.value is None else 1)
                else:
                    if self.value < other.value:
                        return -1
                    elif self.value > other.value:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BankSystem._t_Name)

        __repr__ = __str__

    _M_BankSystem._t_Name = IcePy.defineStruct('::BankSystem::Name', Name, (), (('value', (), IcePy._t_string),))

    _M_BankSystem.Name = Name
    del Name

if 'Surname' not in _M_BankSystem.__dict__:
    _M_BankSystem.Surname = Ice.createTempClass()
    class Surname(object):
        def __init__(self, value=''):
            self.value = value

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.value)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BankSystem.Surname):
                return NotImplemented
            else:
                if self.value is None or other.value is None:
                    if self.value != other.value:
                        return (-1 if self.value is None else 1)
                else:
                    if self.value < other.value:
                        return -1
                    elif self.value > other.value:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BankSystem._t_Surname)

        __repr__ = __str__

    _M_BankSystem._t_Surname = IcePy.defineStruct('::BankSystem::Surname', Surname, (), (('value', (), IcePy._t_string),))

    _M_BankSystem.Surname = Surname
    del Surname

if 'Period' not in _M_BankSystem.__dict__:
    _M_BankSystem.Period = Ice.createTempClass()
    class Period(object):
        def __init__(self, value=''):
            self.value = value

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.value)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BankSystem.Period):
                return NotImplemented
            else:
                if self.value is None or other.value is None:
                    if self.value != other.value:
                        return (-1 if self.value is None else 1)
                else:
                    if self.value < other.value:
                        return -1
                    elif self.value > other.value:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BankSystem._t_Period)

        __repr__ = __str__

    _M_BankSystem._t_Period = IcePy.defineStruct('::BankSystem::Period', Period, (), (('value', (), IcePy._t_string),))

    _M_BankSystem.Period = Period
    del Period

if 'AccountCreated' not in _M_BankSystem.__dict__:
    _M_BankSystem.AccountCreated = Ice.createTempClass()
    class AccountCreated(object):
        def __init__(self, password=Ice._struct_marker, accountType=_M_BankSystem.AccountType.STANDARD):
            if password is Ice._struct_marker:
                self.password = _M_BankSystem.Password()
            else:
                self.password = password
            self.accountType = accountType

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.password)
            _h = 5 * _h + Ice.getHash(self.accountType)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BankSystem.AccountCreated):
                return NotImplemented
            else:
                if self.password is None or other.password is None:
                    if self.password != other.password:
                        return (-1 if self.password is None else 1)
                else:
                    if self.password < other.password:
                        return -1
                    elif self.password > other.password:
                        return 1
                if self.accountType is None or other.accountType is None:
                    if self.accountType != other.accountType:
                        return (-1 if self.accountType is None else 1)
                else:
                    if self.accountType < other.accountType:
                        return -1
                    elif self.accountType > other.accountType:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BankSystem._t_AccountCreated)

        __repr__ = __str__

    _M_BankSystem._t_AccountCreated = IcePy.defineStruct('::BankSystem::AccountCreated', AccountCreated, (), (
        ('password', (), _M_BankSystem._t_Password),
        ('accountType', (), _M_BankSystem._t_AccountType)
    ))

    _M_BankSystem.AccountCreated = AccountCreated
    del AccountCreated

if 'LoanEstimate' not in _M_BankSystem.__dict__:
    _M_BankSystem.LoanEstimate = Ice.createTempClass()
    class LoanEstimate(object):
        def __init__(self, originCurrency=Ice._struct_marker, foreignCurrency=Ice._struct_marker):
            if originCurrency is Ice._struct_marker:
                self.originCurrency = _M_BankSystem.Balance()
            else:
                self.originCurrency = originCurrency
            if foreignCurrency is Ice._struct_marker:
                self.foreignCurrency = _M_BankSystem.Balance()
            else:
                self.foreignCurrency = foreignCurrency

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_BankSystem.LoanEstimate):
                return NotImplemented
            else:
                if self.originCurrency != other.originCurrency:
                    return False
                if self.foreignCurrency != other.foreignCurrency:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_BankSystem._t_LoanEstimate)

        __repr__ = __str__

    _M_BankSystem._t_LoanEstimate = IcePy.defineStruct('::BankSystem::LoanEstimate', LoanEstimate, (), (
        ('originCurrency', (), _M_BankSystem._t_Balance),
        ('foreignCurrency', (), _M_BankSystem._t_Balance)
    ))

    _M_BankSystem.LoanEstimate = LoanEstimate
    del LoanEstimate

if 'InvalidCredentialsException' not in _M_BankSystem.__dict__:
    _M_BankSystem.InvalidCredentialsException = Ice.createTempClass()
    class InvalidCredentialsException(Ice.UserException):
        def __init__(self, reason="credentials invalid"):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::BankSystem::InvalidCredentialsException'

    _M_BankSystem._t_InvalidCredentialsException = IcePy.defineException('::BankSystem::InvalidCredentialsException', InvalidCredentialsException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    InvalidCredentialsException._ice_type = _M_BankSystem._t_InvalidCredentialsException

    _M_BankSystem.InvalidCredentialsException = InvalidCredentialsException
    del InvalidCredentialsException

if 'InvalidAccountTypeException' not in _M_BankSystem.__dict__:
    _M_BankSystem.InvalidAccountTypeException = Ice.createTempClass()
    class InvalidAccountTypeException(Ice.UserException):
        def __init__(self, reason="only premium users can apply for a loan"):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::BankSystem::InvalidAccountTypeException'

    _M_BankSystem._t_InvalidAccountTypeException = IcePy.defineException('::BankSystem::InvalidAccountTypeException', InvalidAccountTypeException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    InvalidAccountTypeException._ice_type = _M_BankSystem._t_InvalidAccountTypeException

    _M_BankSystem.InvalidAccountTypeException = InvalidAccountTypeException
    del InvalidAccountTypeException

if 'CurrencyNotSupportedException' not in _M_BankSystem.__dict__:
    _M_BankSystem.CurrencyNotSupportedException = Ice.createTempClass()
    class CurrencyNotSupportedException(Ice.UserException):
        def __init__(self, reason="this bank does not support this currency"):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::BankSystem::CurrencyNotSupportedException'

    _M_BankSystem._t_CurrencyNotSupportedException = IcePy.defineException('::BankSystem::CurrencyNotSupportedException', CurrencyNotSupportedException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    CurrencyNotSupportedException._ice_type = _M_BankSystem._t_CurrencyNotSupportedException

    _M_BankSystem.CurrencyNotSupportedException = CurrencyNotSupportedException
    del CurrencyNotSupportedException

_M_BankSystem._t_Account = IcePy.defineValue('::BankSystem::Account', Ice.Value, -1, (), False, True, None, ())

if 'AccountPrx' not in _M_BankSystem.__dict__:
    _M_BankSystem.AccountPrx = Ice.createTempClass()
    class AccountPrx(Ice.ObjectPrx):

        def getAccountType(self, context=None):
            return _M_BankSystem.Account._op_getAccountType.invoke(self, ((), context))

        def getAccountTypeAsync(self, context=None):
            return _M_BankSystem.Account._op_getAccountType.invokeAsync(self, ((), context))

        def begin_getAccountType(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_BankSystem.Account._op_getAccountType.begin(self, ((), _response, _ex, _sent, context))

        def end_getAccountType(self, _r):
            return _M_BankSystem.Account._op_getAccountType.end(self, _r)

        def getAccountBalance(self, context=None):
            return _M_BankSystem.Account._op_getAccountBalance.invoke(self, ((), context))

        def getAccountBalanceAsync(self, context=None):
            return _M_BankSystem.Account._op_getAccountBalance.invokeAsync(self, ((), context))

        def begin_getAccountBalance(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_BankSystem.Account._op_getAccountBalance.begin(self, ((), _response, _ex, _sent, context))

        def end_getAccountBalance(self, _r):
            return _M_BankSystem.Account._op_getAccountBalance.end(self, _r)

        def applyForLoan(self, currency, amount, period, context=None):
            return _M_BankSystem.Account._op_applyForLoan.invoke(self, ((currency, amount, period), context))

        def applyForLoanAsync(self, currency, amount, period, context=None):
            return _M_BankSystem.Account._op_applyForLoan.invokeAsync(self, ((currency, amount, period), context))

        def begin_applyForLoan(self, currency, amount, period, _response=None, _ex=None, _sent=None, context=None):
            return _M_BankSystem.Account._op_applyForLoan.begin(self, ((currency, amount, period), _response, _ex, _sent, context))

        def end_applyForLoan(self, _r):
            return _M_BankSystem.Account._op_applyForLoan.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_BankSystem.AccountPrx.ice_checkedCast(proxy, '::BankSystem::Account', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_BankSystem.AccountPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::BankSystem::Account'
    _M_BankSystem._t_AccountPrx = IcePy.defineProxy('::BankSystem::Account', AccountPrx)

    _M_BankSystem.AccountPrx = AccountPrx
    del AccountPrx

    _M_BankSystem.Account = Ice.createTempClass()
    class Account(Ice.Object):

        def ice_ids(self, current=None):
            return ('::BankSystem::Account', '::Ice::Object')

        def ice_id(self, current=None):
            return '::BankSystem::Account'

        @staticmethod
        def ice_staticId():
            return '::BankSystem::Account'

        def getAccountType(self, current=None):
            raise NotImplementedError("servant method 'getAccountType' not implemented")

        def getAccountBalance(self, current=None):
            raise NotImplementedError("servant method 'getAccountBalance' not implemented")

        def applyForLoan(self, currency, amount, period, current=None):
            raise NotImplementedError("servant method 'applyForLoan' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_BankSystem._t_AccountDisp)

        __repr__ = __str__

    _M_BankSystem._t_AccountDisp = IcePy.defineClass('::BankSystem::Account', Account, (), None, ())
    Account._ice_type = _M_BankSystem._t_AccountDisp

    Account._op_getAccountType = IcePy.Operation('getAccountType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_BankSystem._t_AccountType, False, 0), ())
    Account._op_getAccountBalance = IcePy.Operation('getAccountBalance', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_BankSystem._t_Balance, False, 0), ())
    Account._op_applyForLoan = IcePy.Operation('applyForLoan', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_BankSystem._t_Currency, False, 0), ((), _M_BankSystem._t_Balance, False, 0), ((), _M_BankSystem._t_Period, False, 0)), (), ((), _M_BankSystem._t_LoanEstimate, False, 0), (_M_BankSystem._t_InvalidAccountTypeException,))

    _M_BankSystem.Account = Account
    del Account

_M_BankSystem._t_AccountStandard = IcePy.defineValue('::BankSystem::AccountStandard', Ice.Value, -1, (), False, True, None, ())

if 'AccountStandardPrx' not in _M_BankSystem.__dict__:
    _M_BankSystem.AccountStandardPrx = Ice.createTempClass()
    class AccountStandardPrx(_M_BankSystem.AccountPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_BankSystem.AccountStandardPrx.ice_checkedCast(proxy, '::BankSystem::AccountStandard', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_BankSystem.AccountStandardPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::BankSystem::AccountStandard'
    _M_BankSystem._t_AccountStandardPrx = IcePy.defineProxy('::BankSystem::AccountStandard', AccountStandardPrx)

    _M_BankSystem.AccountStandardPrx = AccountStandardPrx
    del AccountStandardPrx

    _M_BankSystem.AccountStandard = Ice.createTempClass()
    class AccountStandard(_M_BankSystem.Account):

        def ice_ids(self, current=None):
            return ('::BankSystem::Account', '::BankSystem::AccountStandard', '::Ice::Object')

        def ice_id(self, current=None):
            return '::BankSystem::AccountStandard'

        @staticmethod
        def ice_staticId():
            return '::BankSystem::AccountStandard'

        def __str__(self):
            return IcePy.stringify(self, _M_BankSystem._t_AccountStandardDisp)

        __repr__ = __str__

    _M_BankSystem._t_AccountStandardDisp = IcePy.defineClass('::BankSystem::AccountStandard', AccountStandard, (), None, (_M_BankSystem._t_AccountDisp,))
    AccountStandard._ice_type = _M_BankSystem._t_AccountStandardDisp

    _M_BankSystem.AccountStandard = AccountStandard
    del AccountStandard

_M_BankSystem._t_AccountPremium = IcePy.defineValue('::BankSystem::AccountPremium', Ice.Value, -1, (), False, True, None, ())

if 'AccountPremiumPrx' not in _M_BankSystem.__dict__:
    _M_BankSystem.AccountPremiumPrx = Ice.createTempClass()
    class AccountPremiumPrx(_M_BankSystem.AccountPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_BankSystem.AccountPremiumPrx.ice_checkedCast(proxy, '::BankSystem::AccountPremium', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_BankSystem.AccountPremiumPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::BankSystem::AccountPremium'
    _M_BankSystem._t_AccountPremiumPrx = IcePy.defineProxy('::BankSystem::AccountPremium', AccountPremiumPrx)

    _M_BankSystem.AccountPremiumPrx = AccountPremiumPrx
    del AccountPremiumPrx

    _M_BankSystem.AccountPremium = Ice.createTempClass()
    class AccountPremium(_M_BankSystem.Account):

        def ice_ids(self, current=None):
            return ('::BankSystem::Account', '::BankSystem::AccountPremium', '::Ice::Object')

        def ice_id(self, current=None):
            return '::BankSystem::AccountPremium'

        @staticmethod
        def ice_staticId():
            return '::BankSystem::AccountPremium'

        def __str__(self):
            return IcePy.stringify(self, _M_BankSystem._t_AccountPremiumDisp)

        __repr__ = __str__

    _M_BankSystem._t_AccountPremiumDisp = IcePy.defineClass('::BankSystem::AccountPremium', AccountPremium, (), None, (_M_BankSystem._t_AccountDisp,))
    AccountPremium._ice_type = _M_BankSystem._t_AccountPremiumDisp

    _M_BankSystem.AccountPremium = AccountPremium
    del AccountPremium

_M_BankSystem._t_AccountFactory = IcePy.defineValue('::BankSystem::AccountFactory', Ice.Value, -1, (), False, True, None, ())

if 'AccountFactoryPrx' not in _M_BankSystem.__dict__:
    _M_BankSystem.AccountFactoryPrx = Ice.createTempClass()
    class AccountFactoryPrx(Ice.ObjectPrx):

        def createAccount(self, name, surname, pesel, income, context=None):
            return _M_BankSystem.AccountFactory._op_createAccount.invoke(self, ((name, surname, pesel, income), context))

        def createAccountAsync(self, name, surname, pesel, income, context=None):
            return _M_BankSystem.AccountFactory._op_createAccount.invokeAsync(self, ((name, surname, pesel, income), context))

        def begin_createAccount(self, name, surname, pesel, income, _response=None, _ex=None, _sent=None, context=None):
            return _M_BankSystem.AccountFactory._op_createAccount.begin(self, ((name, surname, pesel, income), _response, _ex, _sent, context))

        def end_createAccount(self, _r):
            return _M_BankSystem.AccountFactory._op_createAccount.end(self, _r)

        def obtainAccess(self, pesel, context=None):
            return _M_BankSystem.AccountFactory._op_obtainAccess.invoke(self, ((pesel, ), context))

        def obtainAccessAsync(self, pesel, context=None):
            return _M_BankSystem.AccountFactory._op_obtainAccess.invokeAsync(self, ((pesel, ), context))

        def begin_obtainAccess(self, pesel, _response=None, _ex=None, _sent=None, context=None):
            return _M_BankSystem.AccountFactory._op_obtainAccess.begin(self, ((pesel, ), _response, _ex, _sent, context))

        def end_obtainAccess(self, _r):
            return _M_BankSystem.AccountFactory._op_obtainAccess.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_BankSystem.AccountFactoryPrx.ice_checkedCast(proxy, '::BankSystem::AccountFactory', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_BankSystem.AccountFactoryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::BankSystem::AccountFactory'
    _M_BankSystem._t_AccountFactoryPrx = IcePy.defineProxy('::BankSystem::AccountFactory', AccountFactoryPrx)

    _M_BankSystem.AccountFactoryPrx = AccountFactoryPrx
    del AccountFactoryPrx

    _M_BankSystem.AccountFactory = Ice.createTempClass()
    class AccountFactory(Ice.Object):

        def ice_ids(self, current=None):
            return ('::BankSystem::AccountFactory', '::Ice::Object')

        def ice_id(self, current=None):
            return '::BankSystem::AccountFactory'

        @staticmethod
        def ice_staticId():
            return '::BankSystem::AccountFactory'

        def createAccount(self, name, surname, pesel, income, current=None):
            raise NotImplementedError("servant method 'createAccount' not implemented")

        def obtainAccess(self, pesel, current=None):
            raise NotImplementedError("servant method 'obtainAccess' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_BankSystem._t_AccountFactoryDisp)

        __repr__ = __str__

    _M_BankSystem._t_AccountFactoryDisp = IcePy.defineClass('::BankSystem::AccountFactory', AccountFactory, (), None, ())
    AccountFactory._ice_type = _M_BankSystem._t_AccountFactoryDisp

    AccountFactory._op_createAccount = IcePy.Operation('createAccount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_BankSystem._t_Name, False, 0), ((), _M_BankSystem._t_Surname, False, 0), ((), _M_BankSystem._t_Pesel, False, 0), ((), _M_BankSystem._t_Balance, False, 0)), (), ((), _M_BankSystem._t_AccountCreated, False, 0), ())
    AccountFactory._op_obtainAccess = IcePy.Operation('obtainAccess', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_BankSystem._t_Pesel, False, 0),), (), ((), _M_BankSystem._t_AccountPrx, False, 0), (_M_BankSystem._t_InvalidCredentialsException,))

    _M_BankSystem.AccountFactory = AccountFactory
    del AccountFactory

# End of module BankSystem
